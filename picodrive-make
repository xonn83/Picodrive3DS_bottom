#---------------------------------------------------------------------------------
.SUFFIXES:
#---------------------------------------------------------------------------------

ifeq ($(strip $(DEVKITARM)),)
$(error "Please set DEVKITARM in your environment. export DEVKITARM=<path to>devkitARM")
endif

TOPDIR ?= $(CURDIR)
include $(DEVKITARM)/3ds_rules

#---------------------------------------------------------------------------------
# TARGET is the name of the output
# BUILD is the directory where object files & intermediate files will be placed
# SOURCES is a list of directories containing source code
# DATA is a list of directories containing data files
# INCLUDES is a list of directories containing header files
#
# NO_SMDH: if set to anything, no SMDH file is generated.
# ROMFS is the directory which contains the RomFS, relative to the Makefile (Optional)
# APP_TITLE is the name of the app stored in the SMDH file (Optional)
# APP_DESCRIPTION is the description of the app stored in the SMDH file (Optional)
# APP_AUTHOR is the author of the app stored in the SMDH file (Optional)
# ICON is the filename of the icon (.png), relative to the project folder.
#   If not set, it attempts to use one of the following (in this order):
#     - <Project name>.png
#     - icon.png
#     - <libctru folder>/default_icon.png
#---------------------------------------------------------------------------------
APP_TITLE	:=	PicoDrive for 3DS (bottom)
APP_DESCRIPTION	:=	Genesis/MasterSystem emulator
APP_AUTHOR	:=	bubble2k16
ASSETS		:=	src/cores/picodrive/assets
ICON		:=	$(ASSETS)/icon.png
TARGET		:=	picodrive3DS_bottom
BUILD		:=	build
SOURCES		:=	src
DATA		:=	data
INCLUDES	:=	include \
			src/3ds/zlib \
			src/3ds \
			src/cores/ \
			src/cores/picodrive/ \
			src/cores/picodrive/3ds \
			src/cores/picodrive/arm \

#ROMFS		:=	src/cores/picodrive/romfs

#---------------------------------------------------------------------------------
# options for code generation
#---------------------------------------------------------------------------------

ARCH	:=	-march=armv6k -mtune=mpcore -mfloat-abi=hard -mtp=soft

CFLAGS	:=	-g -w -O3 -mword-relocations -finline-limit=20000 \
            -D_ASM_DRAW_C -D_ASM_MEMORY_C -D_ASM_MISC_C -D_ASM_YM2612_C -D_ASM_CD_MEMORY_C -D_ASM_32X_DRAW \
			-DEMU_C68K -D_USE_DRZ80 -D__arm__ -DDRC_SH2 -D_SVP_DRC -D_3DS \
			-fno-rtti -fomit-frame-pointer -ffunction-sections -fpermissive \
			$(ARCH)

CFLAGS	+=	$(INCLUDE) -DARM11 -D_3DS -D__GNUC__ -DUSE_FILE32API -DLIBCTRU_1_0_0 -DLSB_FIRST -DARM_ARCH

CXXFLAGS	:= $(CFLAGS)  -fno-exceptions -std=gnu++11

ASFLAGS	:=	-g $(ARCH)
LDFLAGS	=	-specs=3dsx.specs -g $(ARCH) -Wl,-Map,$(notdir $*.map)

LIBS	:= -lcitro3d -lctru -lm

#---------------------------------------------------------------------------------
# list of directories containing libraries, this must be the top level containing
# include and lib
#---------------------------------------------------------------------------------
LIBDIRS	:= $(CTRULIB)


#---------------------------------------------------------------------------------
# no real need to edit anything past this point unless you need to add additional
# rules for different file extensions
#---------------------------------------------------------------------------------
ifneq ($(BUILD),$(notdir $(CURDIR)))
#---------------------------------------------------------------------------------

export OUTPUT	:=	$(CURDIR)/$(TARGET)
export TOPDIR	:=	$(CURDIR)

export VPATH	:=	$(foreach dir,$(SOURCES),$(CURDIR)/$(dir)) \
			$(foreach dir,$(DATA),$(CURDIR)/$(dir))

export DEPSDIR	:=	$(CURDIR)/$(BUILD)


SFILES		:=	$(foreach file,$(notdir $(wildcard src/cores/picodrive/*.s)),					cores/picodrive/$(file)) \
				$(foreach file,$(notdir $(wildcard src/cores/picodrive/cpu/cyclone/*.s)),		cores/picodrive/cpu/cyclone/$(file)) \
				$(foreach file,$(notdir $(wildcard src/cores/picodrive/cpu/cyclone/tools/*.s)),	cores/picodrive/cpu/cyclone/tools/$(file)) \
				$(foreach file,$(notdir $(wildcard src/cores/picodrive/cpu/DrZ80/*.s)),			cores/picodrive/cpu/DrZ80/$(file)) \
				$(foreach file,$(notdir $(wildcard src/cores/picodrive/cpu/drc/*.s)),			cores/picodrive/cpu/drc/$(file)) \
				$(foreach file,$(notdir $(wildcard src/cores/picodrive/pico/*.s)),				cores/picodrive/pico/$(file)) \
				$(foreach file,$(notdir $(wildcard src/cores/picodrive/pico/32x/*.s)),			cores/picodrive/pico/32x/$(file)) \
				$(foreach file,$(notdir $(wildcard src/cores/picodrive/pico/carthw/svp/*.s)),	cores/picodrive/pico/carthw/svp/$(file)) \
				$(foreach file,$(notdir $(wildcard src/cores/picodrive/pico/cd/*.s)),			cores/picodrive/pico/cd/$(file)) \
				$(foreach file,$(notdir $(wildcard src/cores/picodrive/pico/sound/*.s)),		cores/picodrive/pico/sound/$(file)) \
				$(foreach file,$(notdir $(wildcard src/cores/picodrive/platform/common/*.s)),	cores/picodrive/platform/common/$(file)) \

CFILES		:=	$(foreach file,$(notdir $(wildcard src/3ds/zlib/*.c)),							3ds/zlib/$(file)) \
				$(foreach file,$(notdir $(wildcard src/3ds/*.c)),								3ds/$(file)) \
				$(foreach file,$(notdir $(wildcard src/cores/picodrive/*.c)),					cores/picodrive/$(file)) \
				$(foreach file,$(notdir $(wildcard src/cores/picodrive/3ds/*.c)),				cores/picodrive/3ds/$(file)) \
				$(foreach file,$(notdir $(wildcard src/cores/picodrive/cpu/*.c)),				cores/picodrive/cpu/$(file)) \
				$(foreach file,$(notdir $(wildcard src/cores/picodrive/cpu/cyclone/*.c)),		cores/picodrive/cpu/cyclone/$(file)) \
				$(foreach file,$(notdir $(wildcard src/cores/picodrive/cpu/drc/*.c)),			cores/picodrive/cpu/drc/$(file)) \
				$(foreach file,$(notdir $(wildcard src/cores/picodrive/cpu/sh2/*.c)),			cores/picodrive/cpu/sh2/$(file)) \
				$(foreach file,$(notdir $(wildcard src/cores/picodrive/cpu/sh2/mame/*.c)),		cores/picodrive/cpu/sh2/mame/$(file)) \
				$(foreach file,$(notdir $(wildcard src/cores/picodrive/pico/*.c)),				cores/picodrive/pico/$(file)) \
				$(foreach file,$(notdir $(wildcard src/cores/picodrive/pico/32x/*.c)),			cores/picodrive/pico/32x/$(file)) \
				$(foreach file,$(notdir $(wildcard src/cores/picodrive/pico/carthw/*.c)),		cores/picodrive/pico/carthw/$(file)) \
				$(foreach file,$(notdir $(wildcard src/cores/picodrive/pico/carthw/svp/*.c)),	cores/picodrive/pico/carthw/svp/$(file)) \
				$(foreach file,$(notdir $(wildcard src/cores/picodrive/pico/cd/*.c)),			cores/picodrive/pico/cd/$(file)) \
				$(foreach file,$(notdir $(wildcard src/cores/picodrive/pico/pico/*.c)),			cores/picodrive/pico/pico/$(file)) \
				$(foreach file,$(notdir $(wildcard src/cores/picodrive/pico/sound/*.c)),		cores/picodrive/pico/sound/$(file)) \
				$(foreach file,$(notdir $(wildcard src/cores/picodrive/platform/common/*.c)),	cores/picodrive/platform/common/$(file)) \
				$(foreach file,$(notdir $(wildcard src/cores/picodrive/zlib/*.c)),				cores/picodrive/zlib/$(file)) \

CPPFILES	:=	$(foreach file,$(notdir $(wildcard src/3ds/*.cpp)),								3ds/$(file)) \
				$(foreach file,$(notdir $(wildcard src/cores/picodrive/3ds/*.cpp)),				cores/picodrive/3ds/$(file)) \

PICAFILES	:=	$(foreach file,$(notdir $(wildcard src/cores/picodrive/3ds/*.v.pica)),			cores/picodrive/3ds/$(file))

SHLISTFILES	:=	$(foreach dir,$(SOURCES),$(notdir $(wildcard $(dir)/*.shlist)))

BINFILES	:=	$(foreach dir,$(DATA),$(notdir $(wildcard $(dir)/*.*)))

#---------------------------------------------------------------------------------
# use CXX for linking C++ projects, CC for standard C
#---------------------------------------------------------------------------------
ifeq ($(strip $(CPPFILES)),)
#---------------------------------------------------------------------------------
	export LD	:=	$(CC)
#---------------------------------------------------------------------------------
else
#---------------------------------------------------------------------------------
	export LD	:=	$(CXX)
#---------------------------------------------------------------------------------
endif
#---------------------------------------------------------------------------------

export OFILES	:=	$(addsuffix .o,$(BINFILES)) \
			$(PICAFILES:.v.pica=.shbin.o) \
			$(SHLISTFILES:.shlist=.shbin.o) \
			$(CPPFILES:.cpp=.o) \
			$(CFILES:.c=.o) \
			$(SFILES:.s=.o)

export INCLUDE	:=	$(foreach dir,$(INCLUDES),-I$(CURDIR)/$(dir)) \
			$(foreach dir,$(LIBDIRS),-I$(dir)/include) \
			-I$(CURDIR)/$(BUILD) \
			-I$(CURDIR)/$(SOURCES) \
			-I$(CURDIR)/$(SOURCES)/unzip \

export LIBPATHS	:=	$(foreach dir,$(LIBDIRS),-L$(dir)/lib)

ifeq ($(strip $(ICON)),)
	icons := $(wildcard *.png)
	ifneq (,$(findstring $(TARGET).png,$(icons)))
		export APP_ICON := $(TOPDIR)/$(TARGET).png
	else
		ifneq (,$(findstring icon.png,$(icons)))
			export APP_ICON := $(TOPDIR)/icon.png
		endif
	endif
else
	export APP_ICON := $(TOPDIR)/$(ICON)
endif

ifeq ($(strip $(NO_SMDH)),)
	export _3DSXFLAGS += --smdh=$(CURDIR)/$(TARGET).smdh
endif

ifneq ($(ROMFS),)
	export _3DSXFLAGS += --romfs=$(ROMFS)
endif

#---------------------------------------------------------------------------------
# OS detection to automatically determine the correct makerom variant to use for
# CIA creation
#---------------------------------------------------------------------------------
UNAME_S := $(shell uname -s)
UNAME_M := $(shell uname -m)
MAKEROM :=
ifeq ($(UNAME_S), Darwin)
	ifeq ($(UNAME_M), x86_64)
		MAKEROM := ./makerom/darwin_x86_64/makerom
	endif
endif
ifeq ($(UNAME_S), Linux)
	ifeq ($(UNAME_M), x86_64)
		MAKEROM := ./makerom/linux_x86_64/makerom
	endif
endif
ifeq ($(findstring CYGWIN_NT, $(UNAME_S)),CYGWIN_NT)
	MAKEROM := ./makerom/windows_x86_64/makerom.exe
endif
ifeq ($(findstring MINGW32_NT, $(UNAME_S)), MINGW32_NT)
	MAKEROM := ./makerom/windows_x86_64/makerom.exe
endif
#---------------------------------------------------------------------------------


.PHONY: $(BUILD) clean all

#---------------------------------------------------------------------------------
all: $(BUILD) cia

$(BUILD):
	@[ -d $@ ] || mkdir -p $@
	[ -d build/3ds ] 									|| mkdir -p build/3ds
	[ -d build/3ds/arm ] 								|| mkdir -p build/3ds/arm
	[ -d build/3ds/zlib ] 								|| mkdir -p build/3ds/zlib
	[ -d build/cores/picodrive ] 						|| mkdir -p build/cores/picodrive
	[ -d build/cores/picodrive/3ds ] 					|| mkdir -p build/cores/picodrive/3ds
	[ -d build/cores/picodrive/cpu ] 					|| mkdir -p build/cores/picodrive/cpu
	[ -d build/cores/picodrive/cpu/cyclone ] 			|| mkdir -p build/cores/picodrive/cpu/cyclone
	[ -d build/cores/picodrive/cpu/cyclone/tools ] 		|| mkdir -p build/cores/picodrive/cpu/cyclone/tools
	[ -d build/cores/picodrive/cpu/drc ] 				|| mkdir -p build/cores/picodrive/cpu/drc
	[ -d build/cores/picodrive/cpu/fame ] 				|| mkdir -p build/cores/picodrive/cpu/fame
	[ -d build/cores/picodrive/cpu/musashi ] 			|| mkdir -p build/cores/picodrive/cpu/musashi
	[ -d build/cores/picodrive/cpu/DrZ80 ] 				|| mkdir -p build/cores/picodrive/cpu/DrZ80
	[ -d build/cores/picodrive/cpu/sh2 ] 				|| mkdir -p build/cores/picodrive/cpu/sh2
	[ -d build/cores/picodrive/cpu/sh2/mame ] 			|| mkdir -p build/cores/picodrive/cpu/sh2/mame
	[ -d build/cores/picodrive/pico/ ] 					|| mkdir -p build/cores/picodrive/pico
	[ -d build/cores/picodrive/pico/32x ] 				|| mkdir -p build/cores/picodrive/pico/32x
	[ -d build/cores/picodrive/pico/carthw ] 			|| mkdir -p build/cores/picodrive/pico/carthw
	[ -d build/cores/picodrive/pico/carthw/svp ] 		|| mkdir -p build/cores/picodrive/pico/carthw/svp
	[ -d build/cores/picodrive/pico/cd ] 				|| mkdir -p build/cores/picodrive/pico/cd
	[ -d build/cores/picodrive/pico/pico ] 				|| mkdir -p build/cores/picodrive/pico/pico
	[ -d build/cores/picodrive/pico/sound ] 			|| mkdir -p build/cores/picodrive/pico/sound
	[ -d build/cores/picodrive/platform ] 				|| mkdir -p build/cores/picodrive/platform
	[ -d build/cores/picodrive/platform/common ] 		|| mkdir -p build/cores/picodrive/platform/common
	[ -d build/cores/picodrive/zlib ] 					|| mkdir -p build/cores/picodrive/zlib
	@$(MAKE) --no-print-directory -C $(BUILD) -f $(CURDIR)/picodrive-make

#---------------------------------------------------------------------------------
cia: $(BUILD)
ifneq ($(MAKEROM),)
	$(MAKEROM) -rsf $(ASSETS)/cia.rsf -elf $(OUTPUT).elf -icon $(ASSETS)/cia.icn -banner $(ASSETS)/cia.bnr -f cia -o $(OUTPUT).cia
else
	$(error "CIA creation is not supported on this platform ($(UNAME_S)_$(UNAME_M))")
endif


#---------------------------------------------------------------------------------
clean:
	@echo clean ...
	@rm -fr $(BUILD) $(TARGET).3dsx $(OUTPUT).smdh $(TARGET).elf


#---------------------------------------------------------------------------------
else

DEPENDS	:=	$(OFILES:.o=.d)

#---------------------------------------------------------------------------------
# main targets
#---------------------------------------------------------------------------------
ifeq ($(strip $(NO_SMDH)),)
$(OUTPUT).3dsx	:	$(OUTPUT).elf $(OUTPUT).smdh
else
$(OUTPUT).3dsx	:	$(OUTPUT).elf
endif

$(OUTPUT).elf	:	$(OFILES)

#---------------------------------------------------------------------------------
# you need a rule like this for each extension you use as binary data
#---------------------------------------------------------------------------------
%.bin.o	:	%.bin
#---------------------------------------------------------------------------------
	@echo $(notdir $<)
	@$(bin2o)
#---------------------------------------------------------------------------------
%.png.o	:	%.png
#---------------------------------------------------------------------------------
	@echo $(notdir $<)
	@$(bin2o)

#---------------------------------------------------------------------------------
# rules for assembling GPU shaders
#---------------------------------------------------------------------------------
define shader-as
	$(eval CURBIN := $(patsubst %.shbin.o,%.shbin,$(notdir $@)))
	picasso -o $(CURBIN) $1
	bin2s $(CURBIN) | $(AS) -o $@
	echo "extern const u8" `(echo $(CURBIN) | sed -e 's/^\([0-9]\)/_\1/' | tr . _)`"_end[];" > `(echo $(CURBIN) | tr . _)`.h
	echo "extern const u8" `(echo $(CURBIN) | sed -e 's/^\([0-9]\)/_\1/' | tr . _)`"[];" >> `(echo $(CURBIN) | tr . _)`.h
	echo "extern const u32" `(echo $(CURBIN) | sed -e 's/^\([0-9]\)/_\1/' | tr . _)`_size";" >> `(echo $(CURBIN) | tr . _)`.h
endef

%.shbin.o : %.g.pica %.v.pica 
	@echo $(notdir $^)
	@$(call shader-as,$^)

%.shbin.o : %.v.pica
	@echo $(notdir $<)
	@$(call shader-as,$<)

%.shbin.o : %.shlist
	@echo $(notdir $<)
	@$(call shader-as,$(foreach file,$(shell cat $<),$(dir $<)/$(file)))

-include $(DEPENDS)

#---------------------------------------------------------------------------------------
endif
#---------------------------------------------------------------------------------------
